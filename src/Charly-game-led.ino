#include <WiFi.h>
#include <WebServer.h>
#include "FS.h"
#include "LittleFS.h"

#define DS1   5  // Data pour 74HC595 #1
#define SHCP1 9  // Shift Clock pour 74HC595 #1
#define STCP1 7  // Latch Clock pour 74HC595 #1

#define DS2   35  // Data pour 74HC595 #2
#define SHCP2 18  // Shift Clock pour 74HC595 #2
#define STCP2 33  // Latch Clock pour 74HC595 #2

#define BUTTON 12  // GPIO du bouton-poussoir

#define MAX_SCORES 5  // Nombre maximum de meilleurs scores enregistr√©s

volatile bool buttonPressed = false;          // Variable pour d√©tecter l'appui bouton en IRQ
volatile unsigned long lastDebounceTime = 0;  // Pour l'anti-rebond
const unsigned long debounceDelay = 300;      // Temps minimum entre 2 appuis (50ms)

unsigned long lastUpdate = 0;
unsigned int interval = 5;  // Temps entre 2 d√©calages en ms

const char *ssid = "Charly-Game";   // Nom du r√©seau WiFi
const char *password = "12345678";  // Mot de passe (minimum 8 caract√®res)

int mode = 0;  // Mode d'affichage des LEDs
uint8_t randLedToMatch = 0;
uint8_t findLed = 0;
int defilement = 1000;
int i_defil = 0;
int score = 0;  // üèÜ Variable pour stocker le score

WebServer server(80);  // Serveur web sur le port 80

// Fonction ISR appel√©e en interruption avec anti-rebond
void IRAM_ATTR handleButtonPress() {
  unsigned long currentTime = millis();
  if (currentTime - lastDebounceTime > debounceDelay) {  // V√©rification du rebond
    buttonPressed = true;
    lastDebounceTime = currentTime;
  }
}

// Fonction pour envoyer des donn√©es √† un 74HC595 sp√©cifique
void shiftOutData(int dsPin, int shcpPin, int stcpPin, uint8_t data, bool reverse = false) {
  digitalWrite(stcpPin, LOW);  // D√©sactiver le latch

  for (int i = 0; i < 8; i++) {
    int bitIndex = reverse ? i : (7 - i);  // ‚Ü© inverser l‚Äôordre des bits si besoin

    digitalWrite(shcpPin, LOW);
    digitalWrite(dsPin, (data >> bitIndex) & 1);
    digitalWrite(shcpPin, HIGH);
  }

  digitalWrite(stcpPin, HIGH);  // Valider les donn√©es
}

void setup() {
  Serial.begin(115200);       // Initialisation du moniteur s√©rie
  randomSeed(analogRead(0));  // Initialisation du g√©n√©rateur de nombres al√©atoires

  pinMode(DS1, OUTPUT);
  pinMode(SHCP1, OUTPUT);
  pinMode(STCP1, OUTPUT);
  // Toutes les LEDs √©teintes √† l'initialisation
  shiftOutData(DS1, SHCP1, STCP1, 0x00);

  pinMode(DS2, OUTPUT);
  pinMode(SHCP2, OUTPUT);
  pinMode(STCP2, OUTPUT);
  // Toutes les LEDs √©teintes √† l'initialisation
  shiftOutData(DS2, SHCP2, STCP2, 0x00);

  pinMode(BUTTON, INPUT);                              // Activation du pull-down interne
  attachInterrupt(BUTTON, handleButtonPress, RISING);  // D√©clenchement sur un appui (front montant)

  // Mode Access Point (AP)
  WiFi.softAP(ssid, password);

  // Routes web
  server.on("/", handleRoot);
  server.on("/score", handleScore);  // Route pour r√©cup√©rer le score en AJAX
  server.on("/scores", handleScores);  // Route pour r√©cup√©rer la table de meilleurs scores en AJAX
  server.on("/resetScores", handleResetScores);  // Ajoute la route pour r√©initialiser les scores

  server.begin();
  Serial.println("‚úÖ Serveur Web d√©marr√© !");

  delay(1000);

  // üìÅ D√©marrer LittleFS AVEC FORMATAGE AUTOMATIQUE en cas d‚Äô√©chec
  if (!LittleFS.begin(true)) {
    Serial.println("‚ùå Erreur : LittleFS n'a pas pu √™tre initialis√© !");
  } else {
    Serial.println("‚úÖ LittleFS est pr√™t !");
  }

  init_game();
}

// Fonction qui initialise le jeu
// c'est √† dire :
// - allume aleatoirement une led sur le shift register 2
// - initialise le shift register 1 en partant de la premiere led
void init_game() {
  uint8_t previousRand = randLedToMatch;
  // üîÑ G√©n√©rer une nouvelle LED cible diff√©rente de la pr√©c√©dente
  do {
    randLedToMatch = 1 << random(0, 8);
  } while (randLedToMatch == previousRand);  // Assure que la nouvelle valeur est diff√©rente

  Serial.print("randLedToMatch: 0x");
  Serial.println(randLedToMatch, HEX);
  shiftOutData(DS2, SHCP2, STCP2, randLedToMatch);
  delay(100);
  findLed = 0;  // R√©initialisation correcte
}

int adjustToMultiple(int num) {
  int result = num / 2;
  int remainder5 = result % 5;
  int remainder10 = result % 10;

  if (remainder10 == 0) return result;
  if (remainder5 == 0) return result;

  int down = result - remainder5;
  int up = down + 5;

  return (result - down < up - result) ? down : up;
}

// Effet sp√©cial en cas d'√©chec
void lose_animation() {
  // Clignotement rapide de la LED cible sur le registre #2
  for (uint8_t i = 0; i < 3; i++) {
    shiftOutData(DS2, SHCP2, STCP2, 0xFF);  // Toutes les LEDs s'allument (rouge)
    delay(100);
    shiftOutData(DS2, SHCP2, STCP2, 0x00);  // Toutes les LEDs s'√©teignent
    delay(100);
  }

  // Effet "chute" des LEDs sur le registre #1 (de droite √† gauche)
  for (int i = 7; i >= 0; i--) {
    shiftOutData(DS1, SHCP1, STCP1, 1 << i);
    delay(100);
  }

  // Pause dramatique avant red√©marrage du jeu
  delay(500);
}

// Effet sp√©cial en cas de victoire
void win_animation() {
  // üü¢ 1√®re √©tape : Allumer du centre vers les bords
  uint8_t ledPattern = 0b00000000;  // Commencer avec toutes les LEDs √©teintes
  for (int i = 0; i < 4; i++) {
    ledPattern |= (1 << (3 - i)) | (1 << (4 + i));  // Allumer une paire de LEDs sym√©triquement
    shiftOutData(DS1, SHCP1, STCP1, ledPattern);
    shiftOutData(DS2, SHCP2, STCP2, ledPattern);
    delay(100);  // Vitesse de l'effet
  }

  // üî¥ 2√®me √©tape : Clignotement final de toutes les LEDs
  for (int i = 0; i < 3; i++) {
    shiftOutData(DS1, SHCP1, STCP1, 0xFF);  // Allumer toutes les LEDs
    shiftOutData(DS2, SHCP2, STCP2, 0xFF);
    delay(150);
    shiftOutData(DS1, SHCP1, STCP1, 0x00);  // √âteindre toutes les LEDs
    shiftOutData(DS2, SHCP2, STCP2, 0x00);
    delay(150);
  }
  // Pause avant red√©marrage du jeu
  delay(200);
}

int adjustProgressively(int num) {
  if (num <= 50) return 50;  // Ne descend pas sous 50 ms (√©vite que √ßa devienne injouable)

  float factor = 0.7;         // Facteur de r√©duction (ajuster entre 0.7 et 0.9 pour tester)
  int result = num * factor;  // R√©duction progressive

  return result - (result % 5);  // Arrondi au multiple de 5
}

// fonction de fin d'animation
void end_animation(bool victory) {
  if (victory) {
    win_animation();
    // ajuste le d√©filement en cas de victoire
    defilement = adjustProgressively(defilement);
    score += 10;
    //onWin();  // ‚úÖ G√®re l'incr√©mentation et la sauvegarde
  } else {
    lose_animation();
    // R√©-initialise le d√©filement en cas d'echec
    defilement = 1000;
    saveNewScore(score);  // ‚úÖ Sauvegarde avant de remettre √† z√©ro
    score = 0;
  }
}

// Fonction d'affichage de la page web
void handleRoot() {
  server.send(200, "text/html", pageHTML());
}

// üì° Gestion du score en temps r√©el (AJAX)
void handleScore() {
  server.send(200, "text/plain", String(score));
}

// üì° Gestion du score en temps r√©el (AJAX)
void handleScores() {
  String scoreData = getScores();
  server.send(200, "text/plain", scoreData);
}

// üì° Gestion de la r√©initialisation des scores via un bouton
void handleResetScores() {
  Serial.println("üîÑ R√©initialisation des meilleurs scores...");

  File file = LittleFS.open("/scores.txt", "w");  // √âcraser le fichier
  if (!file) {
    server.send(500, "text/plain", "‚ùå Erreur : Impossible de r√©initialiser les scores.");
    return;
  }
  file.println("0");  // Ajouter un score par d√©faut pour √©viter un fichier vide
  file.close();

  Serial.println("‚úÖ Les meilleurs scores ont √©t√© r√©initialis√©s !");
  server.send(200, "text/plain", "‚úÖ Meilleurs scores r√©initialis√©s !");
}


// üìú Fonction pour r√©cup√©rer les meilleurs scores depuis le fichier
String getScores() {
  // üîç V√©rifier si le fichier existe
  if (!LittleFS.exists("/scores.txt")) {
    //Serial.println("‚ö† Fichier scores.txt introuvable, cr√©ation en cours...");
    File newFile = LittleFS.open("/scores.txt", "w");
    if (!newFile) {
      //Serial.println("‚ùå Impossible de cr√©er le fichier des scores.");
      return "‚ùå Impossible de cr√©er le fichier.";
    }
    newFile.println("0");  // Ajoute un score par d√©faut
    newFile.close();
    return "0";  // Retourne le score par d√©faut
  }

  // üìñ Ouvrir le fichier en lecture
  File file = LittleFS.open("/scores.txt", "r");
  if (!file) {
    //Serial.println("‚ùå Erreur de lecture du fichier.");
    return "‚ùå Erreur de lecture du fichier.";
  }

  // üîç V√©rifier si le fichier est vide
  if (file.size() == 0) {
    Serial.println("‚ö† Fichier vide, ajout d'un score par d√©faut...");
    file.close();
    File newFile = LittleFS.open("/scores.txt", "w");
    if (newFile) {
      newFile.println("0");
      newFile.close();
    }
    return "0";
  }

  String scores = "";
  int lineCount = 0;  // Nombre de scores lus

  while (file.available()) {
    String score = file.readStringUntil('\n');  // Lire chaque ligne
    score.trim();  // üîÑ Supprimer les espaces ou lignes vides
    if (score.length() > 0) {  // V√©rifier si la ligne est valide
      scores += String(lineCount + 1) + ".\t" + score + "\n";  // Ajouter la position (classement)
      lineCount++;
    }
  }

  file.close();

  if (lineCount == 0) {  // V√©rifier si on a bien lu des scores
    //Serial.println("‚ö† Aucun score valide trouv√©.");
    return "Aucun score enregistr√©.";
  }

  //Serial.println("üìú Scores r√©cup√©r√©s :");
  //Serial.println(scores);
  
  return scores;
}

// ‚úÖ Ajoute le score actuel √† la liste si c'est un des 5 meilleurs
void saveNewScore(int newScore) {
  int scores[MAX_SCORES] = { 0 };
  int count = 0;

  // üìñ Lire les scores existants et les stocker dans le tableau
  File file = LittleFS.open("/scores.txt", "r");
  if (file) {
    while (file.available() && count < MAX_SCORES) {
      scores[count] = file.readStringUntil('\n').toInt();
      count++;
    }
    file.close();
  }

  // üîÑ V√©rifier si le nouveau score doit √™tre ajout√©
  bool inserted = false;
  for (int i = 0; i < count; i++) {
    if (newScore > scores[i]) {  
      // üîÑ D√©caler les scores pour ins√©rer le nouveau score
      for (int j = MAX_SCORES - 1; j > i; j--) {
        scores[j] = scores[j - 1];
      }
      scores[i] = newScore;
      inserted = true;
      break;
    }
  }

  // üìÅ √âCRASER l'ancien fichier avec les 5 meilleurs scores
  file = LittleFS.open("/scores.txt", "w");
  for (int i = 0; i < min(count + (inserted ? 1 : 0), MAX_SCORES); i++) {
    file.println(scores[i]);
  }
  file.close();
}

// ‚úÖ Lorsqu'une victoire est obtenue, le score actuel augmente et est compar√© aux meilleurs scores
void onWin() {
  score += 10;  // üîÑ Incr√©mente le score actuel
  saveNewScore(score);  // ‚úÖ Enregistre dans la liste tri√©e
  Serial.print("üéâ Nouveau score enregistr√© : ");
  Serial.println(score);
}

// üåê Nouvelle interface web am√©lior√©e avec un joli bouton de r√©initialisation
String pageHTML() {
  return String("<!DOCTYPE html><html lang='fr'>") +
         "<head><meta charset='UTF-8'><meta name='viewport' content='width=device-width, initial-scale=1.0'>" +
         "<title>Score du Jeu</title>" +
         "<style>" +
         "body { font-family: Arial, sans-serif; text-align: center; background-color: #121212; color: white; margin: 0; padding: 0; }" +
         "h1 { padding: 15px; font-size: 28px; }" +
         ".container { max-width: 400px; margin: auto; padding: 20px; }" +
         ".score { font-size: 60px; font-weight: bold; color: #ff9800; }" +
         ".score-list { font-size: 20px; font-weight: bold; color: white; margin-top: 20px; }" +
         ".score-title { font-size: 24px; color: #4caf50; margin-top: 40px; }" +
         
         /* üé® Bouton stylis√© */
         ".reset-btn { background: linear-gradient(45deg, #ff4444, #cc0000); color: white; " +
         "padding: 12px 25px; font-size: 18px; border: none; border-radius: 8px; " +
         "cursor: pointer; margin-top: 20px; transition: 0.3s ease-in-out; box-shadow: 0 4px 8px rgba(255, 0, 0, 0.3); }" +
         ".reset-btn:hover { background: linear-gradient(45deg, #cc0000, #990000); " +
         "transform: scale(1.1); box-shadow: 0 6px 12px rgba(255, 0, 0, 0.5); }" +

         "</style>" +
         "<script>" +
         "function updateScore() {" +
         "fetch('/score')" +  
         ".then(response => response.text())" +
         ".then(data => document.getElementById('score').innerText = data);" +
         "}" +
         "function updateScores() {" +
         "fetch('/scores')" +  
         ".then(response => response.text())" +
         ".then(data => document.getElementById('scoreList').innerText = data);" +
         "}" +
         "function resetScores() {" +
         "if (confirm('‚ö† Voulez-vous vraiment r√©initialiser les meilleurs scores ?')) {" +  // üî• Ajout d'une confirmation
         "fetch('/resetScores')" +  
         ".then(response => response.text())" +
         ".then(data => { alert(data); updateScores(); });" +
         "}" +
         "}" +
         "setInterval(updateScore, 1000);" +  
         "setInterval(updateScores, 2000);" +  
         "</script>" +
         "</head>" +
         "<body>" +
         "<h1>üéÆ Score du Jeu üéÆ</h1>" +
         "<div class='container'>" +
         "<p>Score actuel :</p>" +
         "<span id='score' class='score'>0</span>" +  
         "<h2 class='score-title'>üèÜ Meilleurs Scores</h2>" +
         "<pre id='scoreList' class='score-list'>Chargement...</pre>" +  
         "<button class='reset-btn' onclick='resetScores()'>üîÑ R√©initialiser les scores</button>" +  
         "</div></body></html>";
}

void loop() {
  unsigned long now = millis();
  if (now - lastUpdate > interval) {
    lastUpdate = now;
    server.handleClient();  // G√©rer les requ√™tes web
    // üü¢ Gestion du chenillard
    if (i_defil >= defilement) {
      shiftOutData(DS1, SHCP1, STCP1, (1 << findLed));
    }

    // üîµ V√©rification du bouton (Victoire ou D√©faite)
    if (buttonPressed) {
      buttonPressed = false;  // Reset du flag

      // üåü Ajustement de la synchronisation avec `findLed - 1`
      uint8_t shiftedValue = (findLed > 0) ? (1 << (findLed - 1)) : 128;

      // üåü SYNCHRONISER AVEC RANDLED üåü
      if (randLedToMatch == shiftedValue) {
        Serial.println("‚úî Victoire !");
        end_animation(true);
      } else {
        Serial.println("‚ùå D√©faite...");
        end_animation(false);
      }
      init_game();  // üîÑ R√©initialiser apr√®s la victoire ou d√©faite
      return;       // √âvite d'ex√©cuter la suite inutilement
    }

    // üü¢ Gestion du chenillard
    if (i_defil >= defilement) {
      findLed = (findLed + 1) % 8;  // Boucle circulaire 0 ‚Üí 7
      i_defil = 0;
    } else {
      i_defil += 5;
    }
  }
}